// Code generated by go-bindata.
// sources:
// templates/tree.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTreeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x18\x6d\x73\xda\x38\xf3\x73\xf2\x2b\xf4\xb8\xe9\x18\xe6\xc1\x36\xb4\x69\x9b\x52\xcc\x4c\xda\xe4\x6e\x7a\x73\x6d\x3a\xd3\x5e\x7b\x2f\xd3\x0f\xc2\x12\x58\xc4\x96\x1c\x49\x86\xb8\x19\xfe\xfb\xad\xe4\x40\x1c\x82\xc1\xf4\x3a\x73\xb7\x1f\x18\x6b\xb5\xda\xf7\x5d\xad\x18\xfc\xef\xec\xe2\xcd\xa7\x3f\x3e\x9c\x0f\x0f\x07\xb1\x4e\x13\x94\x60\x3e\x09\x1d\xca\x9d\xe1\x21\x02\x18\xc4\x14\x93\xf2\xd3\x2e\x53\xaa\x31\x8a\x62\x2c\x15\xd5\xa1\x93\xeb\xb1\x77\xe2\xac\x6f\xc7\x5a\x67\x1e\xbd\xca\xd9\x2c\x74\x7e\xf7\x7e\x3b\xf5\xde\x88\x34\xc3\x9a\x8d\x12\xea\xa0\x48\x70\x4d\x39\x9c\x7d\x7b\x1e\x52\x32\xa1\x0f\x4e\x73\x9c\xd2\xd0\x99\x31\x3a\xcf\x84\xd4\x95\x03\x73\x46\x74\x1c\x12\x3a\x63\x11\xf5\xec\xa2\x83\x72\x45\xa5\xa7\x22\x9c\x60\x60\x1e\x72\xd1\x41\x8c\x33\xcd\x70\x62\x91\x34\xec\x75\x50\x8a\xaf\x59\x9a\xa7\x4b\x04\xc8\xbb\x13\xa8\x99\x4e\xe8\xf0\xe6\xc6\xff\x64\x3e\x16\x8b\x41\x50\x62\x2a\x24\x09\xe3\x97\x48\xd2\x24\x74\x94\x2e\x12\xaa\x62\x4a\x41\xa9\x58\xd2\x71\xe8\x18\x43\x55\x3f\x08\x40\x44\x44\xb8\x3f\x12\x42\x2b\x2d\x71\x66\x16\x91\x48\x83\x15\x22\x78\xea\x3f\xf5\x9f\x07\x91\x52\x77\x38\x3f\x65\x40\xa5\x94\x03\x2a\x6b\x3a\x91\x4c\x17\x20\x23\xc6\x4f\x4f\x8e\xbd\xde\xd5\x49\xfa\xe9\x97\x8b\xd3\x8f\xd7\x27\xd3\xde\x69\xfe\x7f\xfc\xec\xcb\xd9\x67\xfe\x81\x3d\x49\x2e\x7f\x1a\xcf\xe7\xe7\xa7\xf8\x24\x3e\x3b\x23\xd3\x3f\x93\xec\x57\x3a\xb9\x8e\xa7\x9f\xdf\x9d\xf7\xc6\x93\xe9\x97\x0f\x3f\xa7\x97\xdf\xd4\x0b\xf0\x9a\x14\x4a\x09\xc9\x26\x8c\x87\x0e\xe6\x82\x17\xa9\xc8\xd5\x3d\xe3\x55\x24\x59\xa6\x91\x92\x51\x69\x09\x18\x12\x09\x42\xfd\xe9\x55\x4e\x65\x61\x0d\x28\x3f\xbd\x27\x7e\x17\xf4\x37\xfa\x4e\x81\xc5\x20\x28\x4f\x0e\xb7\xb3\x2a\xb4\x00\x97\x67\xd4\x9f\x30\x1d\xe7\x23\x9f\x89\x0a\x6e\xaa\x02\x9c\xb1\x7b\x08\x2f\xc1\x9a\x2a\x5d\xc1\xed\x21\xd0\x44\xc1\x78\x5d\xe2\x39\x88\xb3\xba\x47\x19\xd5\x10\x4d\x1d\x10\x3c\x91\x34\x98\x75\xfd\x17\xfe\x71\x40\x98\xba\xc5\xfc\x53\xf6\x4b\x35\xef\x1b\x51\x0a\xeb\xf9\x3d\xff\xc9\xdd\x46\x89\xad\x11\x56\x0a\x34\xb9\x55\xe2\x0e\x0e\x0e\x1e\x45\x05\xba\x59\x2e\x0e\x6c\xaa\xf7\xd1\xb3\xee\xe3\x57\x2b\x5c\x4c\xd9\x24\xd6\x7d\x74\xdc\xed\x66\xd7\x77\xe8\x6f\x1e\xe3\x84\x5e\xf7\xd1\xcb\x97\x2f\x57\xd8\xc5\x7d\x51\x41\x45\xd6\x9a\xc1\xf7\x91\x06\x8e\x5a\xe3\x9c\x47\x9a\x09\xde\x6a\xdf\xaa\xb4\x0e\x33\x2c\x11\xe8\x1b\xa2\x39\xc8\x16\x73\xdf\x7e\xaf\x4c\x6f\x6d\x3e\x64\xc0\x14\x36\x66\x9c\xca\x3e\x22\x22\xca\x53\x28\x72\x7f\x42\xf5\x79\x42\xcd\xe7\xeb\xe2\x2d\x69\xb9\x51\xe1\xb6\x3b\xb5\x1c\x46\xe2\xfa\x23\x4d\xa8\xd5\xef\x9c\x9b\x16\x40\xfa\x68\x8c\x13\x45\xeb\xcf\xe0\x5c\x8b\x9c\xab\xf2\xd8\xb8\xd8\x49\x9f\xe0\x42\xe4\xe0\xe9\x7a\x3b\x0c\x98\xa6\xd5\x47\xae\x8d\xb3\x5b\x4b\xb9\xa8\x17\x63\x83\xd2\x47\x7f\x6d\x95\xb2\x5d\x07\xcb\xc6\xda\x25\xc0\xa5\x2e\x87\x5a\x76\xeb\x05\xae\x09\xde\xcd\xda\x80\x7b\xdb\x8c\x5d\x6b\xab\xc6\x2d\xdb\x2e\xdb\xf5\x16\x2f\x61\xb1\x95\x62\x8b\x5f\x0c\xec\x65\xb6\xb9\x53\x7e\xb8\xd9\xb6\x04\xc1\xe8\xe3\xdd\x8c\x2d\xbd\xc6\x12\x32\xd9\xc3\x52\x8a\xb9\x07\x3d\x3d\xa3\xc6\x63\x5a\x32\xb8\x5c\x93\x2d\x09\xb2\x84\x1d\xee\xaa\xdd\xfd\xda\x39\xac\xdd\xa3\x65\x5d\xa9\x9d\xa9\x0c\x79\xa3\x76\x65\xa2\x81\x9b\x1b\x24\xc1\x1e\x8a\x8e\xa2\x98\x25\xe4\x3d\x94\x40\x07\x1d\x99\xe3\xa8\x1f\x22\xff\x8d\x41\x4a\xca\xd1\x62\xbb\x35\x2b\x76\x8d\xa8\x0c\x98\xcc\x6b\x1a\xba\x25\x30\xe8\x0c\x2e\x68\x6c\xf5\xf3\x8d\xae\xa0\x57\x83\x3c\xa9\x82\x4d\xf6\x2a\x1b\x3b\x35\xec\xcf\xc7\x0c\x0f\x1b\xb4\xf1\xcd\xfc\xb5\x3b\x37\x96\xd0\xcc\xab\x3b\x4a\xcb\x00\xe8\x41\x39\xd9\x15\xa6\xaf\xdb\x19\x99\xb2\xfb\x57\xb2\x66\xc5\x8e\xd0\x0c\xcc\x50\x6f\xcd\x05\x08\x1c\x61\x64\x83\x79\x82\xbc\xbf\x65\x5c\x7a\xfa\xac\xa4\xb9\x68\xcc\xde\x8a\xd8\x2b\xb8\xdf\x93\x9c\x06\x94\xc8\x65\xb4\xcc\xae\x8a\xf2\xdf\x99\xab\x06\xca\x2e\xb4\x29\xef\xf7\x62\xd5\xdc\x53\x0d\x92\xcd\x40\xb3\x84\x6b\x4e\xf9\xb5\xfe\xc2\xdd\xb8\xb3\x68\xbf\xda\x88\x8f\x0a\x1f\xe6\x1c\x68\xde\x99\xdb\x59\xde\x9f\x68\xe7\xfc\x63\xe0\xa8\xe5\x3e\x62\x63\x09\xde\x75\xdb\x3e\xd6\x5a\xb6\x5c\x98\x1d\xe1\xb4\x8e\x99\xf2\xed\x4d\xe9\x9a\xaa\x77\xdb\x35\xa2\x17\xed\x07\xe8\x75\x2d\xef\x4f\x8e\x83\xe0\xee\x61\x36\x18\x09\x52\x54\xa6\x57\xc2\x66\x28\x4a\xb0\x52\xa1\xb3\x9a\xb1\x9c\xb5\x81\xaf\x42\x03\x77\x94\xf3\x70\xf2\xab\x52\x64\x98\xd3\x04\xd9\x5f\x8f\xd0\x31\xce\x13\xbd\xe1\x84\x01\x78\x4a\xbd\xc3\xf2\x12\xe6\x40\x5e\x13\x34\x08\x29\x1b\xa3\x66\x95\x38\xc8\x86\xb7\x74\xe8\x82\xf7\xb7\xcf\x08\x0d\xfb\xc0\x7e\x2d\x60\x80\x6f\x5f\x7a\x35\x45\x69\x5b\xb6\x33\x5c\xdf\x5d\xde\x0b\x83\x00\x6f\x76\x53\x45\xeb\x2d\xf9\xbd\x73\xf7\xce\x91\x94\x5c\xf0\xd7\x45\x23\x5f\x52\x82\x04\x47\xa3\xe2\x87\xfa\x73\xb7\xfc\x95\x1e\xff\x51\x97\x0e\xe0\x69\x38\x5b\x2b\x92\x0d\xa8\xbd\xea\x26\x12\x89\x97\x12\xef\x79\x4d\xb1\x58\x52\x46\x80\xae\x30\x0f\xc3\x07\xc2\x6a\x74\xd8\x57\x4a\xd9\x98\xac\xa0\xf2\xd3\x29\x1f\xb6\x78\x64\x1e\x36\xa3\x04\xf3\x4b\x07\x95\x7f\xae\x38\xbd\x6e\xf7\xb1\x83\xca\xd7\x65\xe8\x3c\x87\x45\x23\x95\xd6\x50\x95\xe5\x20\x28\x9b\x13\xf4\x2b\x88\xeb\xf0\xf0\xef\x00\x00\x00\xff\xff\x0c\x8d\x5b\x8c\x70\x12\x00\x00")

func templatesTreeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTreeHtml,
		"templates/tree.html",
	)
}

func templatesTreeHtml() (*asset, error) {
	bytes, err := templatesTreeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tree.html", size: 4720, mode: os.FileMode(438), modTime: time.Unix(1449468792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/tree.html": templatesTreeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"tree.html": &bintree{templatesTreeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

