// Code generated by go-bindata.
// sources:
// templates/basic.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBasicHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\x3d\x27\xbf\x82\x75\x53\xc8\x01\x6c\xca\xd9\x06\x28\xa2\x95\x7c\xe8\x6e\x0e\x7b\xe8\x6e\x81\xee\xa5\x28\x72\xa0\xc5\x89\xc5\x54\x22\x55\x92\xb2\xad\x1a\xfe\xef\x25\x29\xcb\x96\xdd\xe8\xc3\x69\x81\x7d\x27\x6a\x48\xbe\xf9\xe0\x1b\x8a\xe1\x77\x1f\xbf\x7c\xf8\xfa\xfb\xaf\x8f\xf3\xeb\x30\xd1\x59\x3a\xbf\x46\x06\x61\x02\x84\x56\x43\xf7\xa9\x99\x4e\x61\xbe\xdd\xe2\xaf\x76\xb0\xdb\x85\x7e\x65\xb9\x3e\x2e\xc9\x40\x13\xc4\x49\x06\xd1\x68\xc5\x60\x9d\x0b\xa9\x47\x28\x16\x5c\x03\xd7\xd1\x68\xcd\xa8\x4e\x22\x0a\x2b\x16\xc3\xd4\x7d\x4c\x50\xa1\x40\x4e\x55\x4c\x52\xb2\x48\x21\xe2\x62\x82\x18\x67\x9a\x91\xd4\x19\x21\xba\x9b\xa0\x8c\x6c\x58\x56\x64\xb5\x61\xd4\x08\x49\xc5\x92\xe5\x1a\x29\x19\x47\xa3\x44\xeb\x3c\xf0\xfd\x58\x50\xc0\x2f\x7f\x15\x20\x4b\x1c\x8b\xcc\xaf\x86\xd3\x77\x78\x86\x7f\xc4\x19\xe3\xf8\x45\x8d\xe6\xa1\x5f\xed\xec\xa1\x2a\xb5\x30\x4e\x73\xc0\x4b\xa6\x93\x62\x81\x99\x68\xd8\x5e\x94\x4f\x72\x76\x62\x98\xa6\x44\x83\xd2\x0d\xdb\x05\x0e\x95\xf5\x48\x39\x96\x64\x6d\xdc\xb9\xd8\xe3\x1c\xb4\xa9\xb1\xf6\x29\x59\x4a\xf0\x57\x33\xfc\x13\xbe\xf7\x29\x53\x7b\xcb\x7f\xa5\xaf\xc3\x3c\x4d\xa2\x72\x76\x87\xef\xf0\xbb\xe3\x44\x65\x6d\x71\x56\x39\xd4\xa5\x15\x83\x1d\x5f\x5d\x5d\x7d\x1f\x97\x68\x5b\x7f\x5c\xb9\xc3\x0e\xd0\xdd\x6c\xf6\xc3\xfb\x83\x31\x01\xb6\x4c\x74\x80\xee\x67\xb3\x7c\x73\x34\xff\x3d\x65\x9c\xc2\x26\x40\x0f\x0f\x0f\x07\xeb\xee\xd4\x97\xdf\x70\x76\x96\xf1\xa9\xd1\xe2\x66\xfc\x5c\xf0\x58\x33\xc1\xc7\xb7\xfb\x98\xce\xb1\x22\x12\x99\x80\x23\xb4\x36\xbe\xc5\x1a\xbb\xf1\x21\xf7\xf1\xeb\x9b\x2c\xac\xb6\x09\xe3\x20\x03\x44\x45\x5c\x64\x46\xe7\x78\x09\xfa\x31\x05\x3b\xfc\xb9\xfc\x44\xc7\x5e\x5c\x7a\xb7\x93\x56\x86\x85\xd8\xfc\x06\x29\xb8\xf8\x1e\xb9\xed\x02\x1a\xa0\x67\x92\x2a\x68\xdf\x43\x0a\x2d\x0a\xae\xaa\x6d\xcf\x65\x80\xb4\x2c\x3a\x96\xa7\xa4\x14\x85\x29\x74\x7b\x1a\x16\xb6\x6d\x03\xe4\xb9\x73\xf6\x5a\x57\xee\xda\xdd\xb8\x33\x09\xd0\x1f\x9d\x5e\xba\x63\x70\x34\x2e\x2d\x61\x2a\xea\x71\xd3\xcb\x5e\xbb\xc3\x33\xc7\xfd\xd4\x16\xde\xfe\x3a\xf2\x5c\xae\x9a\x8c\xdd\x25\x76\xdb\x9e\x71\x8d\x5d\xe7\x8a\x8e\xba\x58\x5c\x94\x36\xd0\xe5\xff\x9f\xb6\x6b\x41\x93\xf4\x7d\x3f\xb1\x5b\xaf\x89\x34\x42\x9e\x12\x29\xc5\x7a\xaa\x12\xd3\x06\xb6\x62\x5a\x32\xc2\x97\x69\x87\x40\x6a\xf4\x94\xab\x75\xf6\x69\x72\xdd\x3a\x07\x55\x5b\xa9\x5e\x29\x1b\xdd\xa8\x3e\x25\x5a\x6c\xb7\x48\x9a\x7c\x00\xdd\xc4\x09\x4b\xe9\x67\xd3\x02\x13\x74\x63\xb7\xa3\x20\x42\xf8\x83\x35\x4a\xe0\x68\xd7\x9d\xcd\x81\x6e\xd0\x2a\x0b\xab\xbc\xa1\x47\x57\x83\x99\x8b\xc1\x33\x11\xbb\xf8\xb0\x8d\xd5\xc4\x35\x40\x27\x4d\x38\xb1\x37\x69\xdc\xbf\xdc\xf2\x0c\xa6\x19\x56\x8a\x9e\x7e\xb0\x30\x31\x00\xa7\x7d\xb5\x7d\xea\x26\xb2\xbd\xf2\x4d\x8e\xfa\x40\x47\x21\x37\x69\xa8\x4f\xf6\xa7\x65\x18\x25\xd8\x47\x00\xfd\xbc\x27\xae\xaa\xfc\xb1\x5a\xf3\x65\x30\xbd\x73\x71\xd1\xc9\xbe\x45\x51\x16\x4a\x14\x32\xae\x25\xd1\x08\xfe\x8d\x02\xb3\xa8\xae\x8e\xd7\xc4\x7a\x11\xd5\xf0\x4a\x0d\x10\x9b\xc5\x30\xc1\x0d\x5f\xf9\xd4\xfe\x97\x7c\x75\x66\x77\xfb\xfe\x5f\xf6\x73\xdb\xe9\xe3\x2a\xf4\x8f\x6f\xf0\x70\x21\x68\x79\x7c\xdd\x98\x77\xf8\x2f\x44\xfe\x69\x5e\x2b\xbc\x11\x66\x48\xd9\xca\x5c\x14\xd1\x28\x2e\xed\x43\xcd\x7c\xd5\x44\xd5\x6e\x43\xe8\xde\xf7\xff\x04\x00\x00\xff\xff\x13\x8d\x93\x58\xf2\x0b\x00\x00")

func templatesBasicHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBasicHtml,
		"templates/basic.html",
	)
}

func templatesBasicHtml() (*asset, error) {
	bytes, err := templatesBasicHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/basic.html", size: 3058, mode: os.FileMode(420), modTime: time.Unix(1448958404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/basic.html": templatesBasicHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"basic.html": &bintree{templatesBasicHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

